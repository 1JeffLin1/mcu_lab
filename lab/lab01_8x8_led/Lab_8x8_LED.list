				;file D:\holtek\lecture\Lab112_L01_8x8LEDs.c
				;1	// This is a 8x8 dot-matrix LED sweeping program : Display “N”, “K”, “N”, “U” in turn; 
				;2	// function delay(n) : Adjust the switching rate of LED column by changing the index n value.
				;3	#include "HT66F50.h"
				;4	#define LedPortx _pd // pa 埠
				;5	#define LedPorty _pe // pa 埠
				;6	unsigned char LedTablex[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 } ;
				;7	unsigned char LedTabley[88] = { 0x00, 0x00, 0x00, 0x7f, 0x02, 0x08, 0x20, 0x7f, //n
				;8	                       0x00, 0x00, 0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,			//k
				;9	                       0x00, 0x00, 0x00, 0x7f, 0x02, 0x08, 0x20, 0x7f,			//n
				;10	                       0x00, 0x00, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f,			//u
				;11	                       0x00, 0x00, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x49,			//e
				;12	                       0x00, 0x00, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x49,			//e
				;13	                       0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,			//1
				;14	                       0x00, 0x00, 0x00, 0x7f, 0x49, 0x49, 0x49, 0x79,			//6
				;15	                       0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0x00,			//|
				;16	                       0x00, 0x00, 0x00, 0x79, 0x49, 0x49, 0x49, 0x4f,			//2
				;17	                       0x00, 0x00, 0x00, 0x7f, 0x41, 0x41, 0x41, 0x7f,			//0
				;18	                       } ;
				;19	// sweeping x axis; At every x-axix point, show y-axix LEDs for a short time
				;20	void delay (unsigned int n)
				;21	{
				;22		unsigned int idy1, idy2;
				;23		for(idy1 = 0; idy1 < n ; idy1++)   // 
				_delay:
				_delay:
006F	5F61	clr     rb
0070	5F62	clr     rc
0071	2880	jmp     _L2
007D	54E1	inc     rb
007E	3D0A	sz      Z
007F	54E2	inc     rc
				_L2:
0080	4761	mov     a, rb
0081	4463	xor     a, n[0]
0082	4762	mov     a, rc
0083	3D0A	sz      Z
0084	4464	xor     a, n[1]
0085	390A	snz     Z
0086	2872	jmp     _L5
0087	0003	ret
				;24			{
				;25			   	GCC_NOP();	//no operation, delay a instruction period
				_L5:
0072	0000	nop
				;26			   	GCC_NOP();	   		   
0073	0000	nop
0074	5F60	clr     ra
				;27			   	for(idy2=0; idy2<4 ; idy2++)
0079	4760	mov     a, ra
007A	0A04	sub     a, 4H
007B	390A	snz     Z
007C	2875	jmp     _L4
				;28			   	{
				;29			  		GCC_NOP();
				_L4:
0075	0000	nop
				;30			  		GCC_NOP();
0076	0000	nop
				;31					GCC_NOP();		    	   
0077	0000	nop
0078	54E0	inc     ra
				;32				}		   		   
				;33			}
				;34	}
				;35	//
				;36	void main(void) // 主函式
				;37	{
				@code .SECTION 'CODE'
				include HT66F50.inc
0000	2801	jmp     _main_startup1
				@start .SECTION 'CODE'
				startupend3:
003B	2888	jmp     _main
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
003C	0060	jmp     L0060
003D	0080	mov     [00H], a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
003E	0000	nop
003F	7F00	sz      LedTabley[0].6
0040	0802	dc	00802H
0041	7F20	sz      LedTabley[32].6
0042	0000	nop
0043	7F00	sz      LedTabley[0].6
0044	1408	inca    TBLH
0045	4122	cpla    LedTabley[34]
0046	0000	nop
0047	7F00	sz      LedTabley[0].6
0048	0802	dc	00802H
0049	7F20	sz      LedTabley[32].6
004A	0000	nop
004B	3F00	sz      [00H].6
004C	4040	dc	04040H
004D	3F40	sz      __pec[25].6
004E	0000	nop
004F	7F00	sz      LedTabley[0].6
0050	4949	dc	04949H
0051	4949	dc	04949H
0052	0000	nop
0053	7F00	sz      LedTabley[0].6
0054	4949	dc	04949H
0055	4949	dc	04949H
0056	0000	nop
0057	7F00	sz      LedTabley[0].6
0058	0000	nop
0059	0000	nop
005A	0000	nop
005B	7F00	sz      LedTabley[0].6
005C	4949	dc	04949H
005D	7949	snz     LedTabley[73].2
005E	0000	nop
005F	7F00	sz      LedTabley[0].6
				L0060:
0060	007F	dc	0007FH
0061	0000	nop
0062	0000	nop
0063	7900	snz     LedTabley[0].2
0064	4949	dc	04949H
0065	4F49	dc	04F49H
0066	0000	nop
0067	7F00	sz      LedTabley[0].6
0068	4141	cpla    LedTabley[65]
0069	7F41	sz      LedTabley[65].6
006A	0201	sub     a, MP0
006B	0804	dc	00804H
006C	2010	call    L0010
006D	8040	dc	08040H
006E	0000	nop
				_L13:
009B	5F67	clr     k[0]
009C	5F68	clr     k[1]
				;38		unsigned int k, j, i, char_no ;
				;39		_smod=0b11000000; 	// [7:5]=100->fH/16,110-->fH/4
				_main:
				_main:
0088	0FC0	mov     a, C0H
0089	008B	mov     SMOD, a
				;40		_pdc = 0 ; 	// 設定 PD 埠為輸出
008A	1F24	clr     PDC
				;41		LedPortx = 0x00 ; 	// 8x8 LED X-axis (PD) OFF
008B	1F23	clr     PD
				;42		_pec=0; 			// 設定 PE 埠為輸出
008C	1F27	clr     PEC
				;43	    LedPorty = 0x00;	// 8x8 LED Y-axis (PE) ON	
008D	1F26	clr     PE
				;44		
				;45		while(1)
				;46		{
				;47			for(char_no = 0 ; char_no < 11 ; char_no++)
				_L14:
008E	5F65	clr     char_no[0]
008F	5F66	clr     char_no[1]
00C6	54E5	inc     char_no[0]
00C7	3D0A	sz      Z
00C8	54E6	inc     char_no[1]
00C9	0F0A	mov     a, AH
00CA	4265	sub     a, char_no[0]
00CB	0F00	mov     a, 0H
00CC	5266	sbc     a, char_no[1]
00CD	380A	snz     C
00CE	288E	jmp     _L14
00CF	2890	jmp     _L8
00D0	28D0	jmp     $
				@dummy .SECTION 'CODE'
00D1	1483	inc     MP1
				L00D2:
00D2	0701	mov     a, MP0
00D3	0084	mov     BP, a
00D4	0702	mov     a, [02H]
00D5	0003	ret
				L1040:
				org	01040h
1040	0000	nop
				;48			{
				;49				for( j = 0 ; j < 100 ; j++ )
00C2	4769	mov     a, k[2]
00C3	0A64	sub     a, 64H
00C4	390A	snz     Z
00C5	289B	jmp     _L13
				;50				{
				;51					for( k = 0 ; k < 8 ; k++ )
00B9	54E7	inc     k[0]
00BA	3D0A	sz      Z
00BB	54E8	inc     k[1]
00BC	4767	mov     a, k[0]
00BD	0C08	xor     a, 8H
00BE	4568	or      a, k[1]
00BF	390A	snz     Z
00C0	289D	jmp     _L11
00C1	54E9	inc     k[2]
				;52					{
				;53						i=char_no*8+k;
				_L8:
0090	4765	mov     a, char_no[0]
0091	40EA	mov     k[3], a
0092	4766	mov     a, char_no[1]
0093	40EB	mov     k[4], a
0094	0F03	mov     a, 3H
				_LI1:
0095	340A	clr     C
0096	5AEA	rlc     k[3]
0097	5AEB	rlc     k[4]
0098	1785	sdz     ACC
0099	2895	jmp     _LI1
009A	5F69	clr     k[2]
				;54						LedPortx = 0x00 ; // 輸出 LED 控制碼, 點亮 LEDx
				_L11:
009D	1F23	clr     PD
				;55						LedPorty = 0x00 ; // 輸出 LED 控制碼, 點亮 LEDx	
009E	1F26	clr     PE
				;56						LedPortx = LedTablex[k] ; // 輸出 LED 控制碼, 點亮 LEDx
009F	0FD8	mov     a, D8H
00A0	4367	add     a, k[0]
00A1	0083	mov     MP1, a
00A2	0F00	mov     a, 0H
00A3	5368	adc     a, k[1]
00A4	0081	mov     MP0, a
00A5	20D2	call    L00D2
00A6	00A3	mov     PD, a
00A7	0F80	mov     a, 80H
00A8	436A	add     a, k[3]
00A9	40E1	mov     rb, a
00AA	0F00	mov     a, 0H
00AB	536B	adc     a, k[4]
00AC	40E2	mov     rc, a
				;57						LedPorty = LedTabley[i] ; // 輸出 LED 控制碼, 點亮 LEDx	
00AD	4767	mov     a, k[0]
00AE	4361	add     a, rb
00AF	0083	mov     MP1, a
00B0	4768	mov     a, k[1]
00B1	5362	adc     a, rc
00B2	0081	mov     MP0, a
00B3	20D2	call    L00D2
00B4	00A6	mov     PE, a
				;58						delay(10);	   
00B5	0F0A	mov     a, AH
00B6	40E3	mov     n, a
00B7	5F64	clr     n[1]
00B8	206F	call    _delay
				;59					}
				;60				}
				;61			}
				;62		}
				;63	}
				;64	
				;file D:\holtek\lecture\Lab_8x8_LED\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2016 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.06 (Above IDE3000 V7.93)                       ;;
				;6	;;    Date:    2016/12/07                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				_main_startup1:
				@start .SECTION 'CODE'
				begin_startup_value:
				@start .SECTION 'CODE'
0001	0F3B	mov     a, 3BH
				;30	  mov tblp,a
0002	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
0003	0F00	mov     a, 0H
				;32	  mov tbhp,a
0004	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
0005	1487	inc     TBLP
				;36	  sz z
0006	3D0A	sz      Z
				;37	  inc tbhp
0007	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
0008	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
0009	1081	sz      MP0
				;44	  jmp read_data
000A	280C	jmp     read_data
				;45	  jmp startupend1
000B	2821	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
000C	1487	inc     TBLP
				;48	  sz z
000D	3D0A	sz      Z
				;49	  inc tbhp
000E	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
000F	1D03	tabrd   MP1
				;54	endif
				;55	  mov a,tblh
				L0010:
0010	0708	mov     a, TBLH
				;56	  mov mp1h,a
0011	0084	mov     BP, a
				;57	next_data:
				;58	  inc tblp
				next_data:
0012	1487	inc     TBLP
				;59	  sz z
0013	3D0A	sz      Z
				;60	  inc tbhp
0014	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
0015	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
0016	0082	mov     [02H], a
				;67	  sdz mp0
0017	1781	sdz     MP0
				;68	  jmp $+2
0018	281A	jmp     L001A
				;69	  jmp next_table
0019	2805	jmp     next_table
				;70	  inc mp1l
				L001A:
001A	1483	inc     MP1
				;71	  mov a,tblh
001B	0708	mov     a, TBLH
				;72	  mov r1,a
001C	0082	mov     [02H], a
				;73	  inc mp1l
001D	1483	inc     MP1
				;74	  sdz mp0
001E	1781	sdz     MP0
				;75	  jmp next_data
001F	2812	jmp     next_data
				;76	  jmp next_table
0020	2805	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81		MOV A,high  bitdatasec1_start
				startupend1:
0021	0F00	mov     a, 0H
				;82		MOV mp1h,a
0022	0084	mov     BP, a
				;83		MOV A,offset bitdatasec1_end
0023	0F80	mov     a, 80H
				;84		mov mp1l,A
0024	0083	mov     MP1, a
				;85		dec mp1l
0025	1583	dec     MP1
				;86		clr z
0026	350A	clr     Z
				;87		sub a,offset bitdatasec1_start
0027	0A80	sub     a, 80H
				;88		sz z
0028	3D0A	sz      Z
				;89		jmp startupend2
0029	282E	jmp     startupend2
				;90	L0005:
				;91		set r1
				L0005:
002A	1F82	set     [02H]
				;92		dec mp1l
002B	1583	dec     MP1
				;93		sdz  acc
002C	1785	sdz     ACC
				;94		jmp L0005
002D	282A	jmp     L0005
				;95	
				;96	startupend2:
				;97		MOV A,high  bitdatasec0_start
				startupend2:
002E	0F00	mov     a, 0H
				;98		MOV mp1h,a
002F	0084	mov     BP, a
				;99		MOV A,offset bitdatasec0_end
0030	0F80	mov     a, 80H
				;100		mov mp1l,A
0031	0083	mov     MP1, a
				;101		dec mp1l
0032	1583	dec     MP1
				;102		clr z
0033	350A	clr     Z
				;103		sub a,offset bitdatasec0_start
0034	0A80	sub     a, 80H
				;104		sz  z
0035	3D0A	sz      Z
				;105		jmp startupend3
0036	283B	jmp     startupend3
				;106	L0006:
				;107		clr r1
				L0006:
0037	1F02	clr     [02H]
				;108		dec mp1l
0038	1583	dec     MP1
				;109		sdz  acc
0039	1785	sdz     ACC
				;110		jmp L0006
003A	2837	jmp     L0006
				;111	startupend3:
				;112			
				;113	   
				;114	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;115	startup_value:
				;116	;;linker range the initial value table here
				;117	
				;118	@BITDATASEC1 .SECTION com_l 'DATA'  
				;119	bitdatasec1_start:
				;120	
				;121	@BITDATASEC1 .SECTION com_e 'DATA'  
				;122	bitdatasec1_end:
				;123	
				;124	@BITDATASEC .SECTION com_l 'DATA'  
				;125	bitdatasec0_start:
				;126	
				;127	@BITDATASEC .SECTION com_e 'DATA'  
				;128	bitdatasec0_end:
				data .SECTION 'DATA'
				__smod DB DUP (?) ; __smod
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				LedTabley DB DUP (?) ; LedTabley
				LedTablex DB DUP (?) ; LedTablex
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				n DB 2 DUP (?) ; n
				char_no DB 2 DUP (?) ; char_no
				k DB 2 DUP (?) ; k
